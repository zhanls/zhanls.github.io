{"meta":{"title":"陌上人如玉,公子世无双","subtitle":"","description":"","author":"詹淋淞","url":"https://zhanls.github.io","root":"/"},"pages":[{"title":"tags","date":"2020-06-23T08:15:44.000Z","updated":"2020-10-10T01:35:50.670Z","comments":true,"path":"tags/index.html","permalink":"https://zhanls.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-06-23T08:16:00.000Z","updated":"2020-10-10T01:35:50.667Z","comments":true,"path":"categories/index.html","permalink":"https://zhanls.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"奶茶妹妹赴剑桥读书引发热议，到底是真是假？","slug":"奶茶妹妹赴剑桥读书引发热议，到底是真是假？","date":"2020-07-11T14:57:08.000Z","updated":"2020-10-10T01:35:50.657Z","comments":true,"path":"2020/07/11/奶茶妹妹赴剑桥读书引发热议，到底是真是假？/","link":"","permalink":"https://zhanls.github.io/2020/07/11/%E5%A5%B6%E8%8C%B6%E5%A6%B9%E5%A6%B9%E8%B5%B4%E5%89%91%E6%A1%A5%E8%AF%BB%E4%B9%A6%E5%BC%95%E5%8F%91%E7%83%AD%E8%AE%AE%EF%BC%8C%E5%88%B0%E5%BA%95%E6%98%AF%E7%9C%9F%E6%98%AF%E5%81%87%EF%BC%9F/","excerpt":"","text":"今天文章《利己也许是天性，但”精致利己主义“不是》谈了很多点啊，谈到了很多人性心理学层面上的东西，个人觉得谈的很多确实都是非常有价值的，也很真实的东西，比如谈到利己主义时举例，如果让人玩一个分钱的游戏，自己可以决定给”队友“多少钱，他们做决定的时间越短，分给自己的就越多。这可能说明，自动化，快速决策的行为往往表现为自利行为，是人更下意识的反应，而为他人考虑，为他人谋福利的行为则可能需要更多的认知资源。这又让我想到了另一个例子，“让一部分人先富起来”是邓小平同志于1985年10月23日，会见美国时代公司组织的美国高级企业家代表团时说的话。小平同志的这个观点和主张是非常有远见和前瞻性的，可以说洞悉人性，也可以说是无奈之举。 偏离主题了，不过我是怎么浏览心理学，突然到了浏览”共产主义“”意识形态“等百度百科的啊，原来，是看到了”让一部分人先富起来“百度百科，然后里面有一条连接。Anyway，buzhongy了，不过思维被打断的感觉有确确实实的体会到，完全不相干的两件事‘我为什么从浏览《利己也许是天性，但”精致利己主义“不是》，一路走到了对共产主义，意识形态的纠结上面’和”阅读学习共产主义的思想“ 只能说人一辈子有问不完的为什么把，卡个KPI，每日一篇博客，11点59分~","categories":[],"tags":[]},{"title":"Git commit 常见用法","slug":"Git-commit-常见用法","date":"2020-07-03T14:39:40.000Z","updated":"2020-10-10T01:35:50.646Z","comments":true,"path":"2020/07/03/Git-commit-常见用法/","link":"","permalink":"https://zhanls.github.io/2020/07/03/Git-commit-%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/","excerpt":"","text":"Git commitgit commit 主要是将暂存区里的改动给提交到本地的版本库。每次使用git commit 命令我们都会在本地版本库生成一个40位的哈希值，这个哈希值也叫commit-id，commit-id在版本回退的时候是非常有用的，它相当于一个快照，可以在未来的任何时候通过与git reset的组合命令回到这里. git commit -m “message”这种是比较常见的用法，-m 参数表示可以直接输入后面的“message”，如果不加 -m参数，那么是不能直接输入message的，而是会调用一个编辑器一般是vim来让你输入这个message。 message即是我们用来简要说明这次提交的语句。还有另外一种方法，当我们想要提交的message很长或者我们想描述的更清楚更简洁明了一点，我们可以使用这样的格式，如下： 12345git commit -m 'message1message2message3' git commit -a -m “massage”其他功能如-m参数，加的-a参数可以将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库，即使它们没有经过git add添加到暂存区。 注意，新加的文件（即没有被git系统管理的文件）是不能被提交到本地仓库的。建议一般不要使用-a参数，正常的提交还是使用git add先将要改动的文件添加到暂存区，再用git commit 提交到本地版本库。 git commit –amend如果我们不小心提交了一版我们不满意的代码，并且给它推送到服务器了，在代码没被merge之前我们希望再修改一版满意的，而如果我们不想在服务器上abondon，那么我们怎么做呢？ 1git commit --amend //也叫追加提交，它可以在不增加一个新的 commit-id 情况下将新修改的代码追加到前一次的 commit-id 中 假如现在版本库里最近的一版正是我们想要追加进去的那版，此时是最简单的，直接修改工作区代码，然后git add，之后就可以直接进行git push到服务器，中间不需要进行其他的操作如git pull等。 如果现在版本库里最近的一版不是我们想要追加进去的那版，那么此时我们需要将版本库里的版本回退到我们想要追加的那一版，想要将版本回退到我们想要的哪一版有好几种方法。 第一种即是我们从服务器上选取我们需要的版本，直接进行挑拣，在服务器的提交管理页面上右上方一般会有一个Download按钮，点击会弹出一个下拉框，选择其中的cherry-pick，复制命令，之后在我们版本仓库对应的目录下运行这个命令，执行完后，使用git log -1 命令，可以查看到现在版本库里最近的一版变成了我们刚才挑拣的这版，此时再在工作区直接修改代码，改完之后进行git add，再执行本git commit --amend命令，之后git push。 使用gitk或其他的图形界面化工具，在终端输入 gitk，回车，会弹出 gitk 的图形界面，在界面的左侧部分陈列着版本库中的一条条commit-id，此时选中我们需要的那一版，右键点击之后会弹出一个选择菜单，如果是在 master 分支上，那么其中会有一项是 Reset master branch to here，点击这项，会弹出一个名为confirm reset的确认box，选择reset type 中的hard项，再点击OK，关闭gitk图形界面，回到终端，运行git log -1命令，发现现在版本库里最近的一次提交已经是我们希望的那一版了，此时再在工作区直接修改代码，改完之后进行git add，再执行本git commit --amend命令，之后git push. 如果我们知道我们需要的版本与现在最近的版本中间隔着 n 个提交，那么我们可以直接使用git reset --hard HEAD～n命令，关于git reset命令有详解，此时这个命令执行完后，运行git log -1命令我们会发现现在版本库里最近的一版就是我们需要的那版，此时再在工作区直接修改代码，改完之后进行git add，再执行本git commit --amend命令，之后git push. 如果我们不知道我们需要的版本与现在最近的版本中间隔着 n 个提交，那么我们可以使用git log来查看版本库中的commit-id，找到我们需要的commit-id后，在终端中执行git reset --hard commit-id，这个命令执行完后，运行git log -1命令我们会发现现在版本库里最近的一版就是我们需要的那版，此时再在工作区直接修改代码，改完之后进行git add，再执行本git commit --amend命令，之后git push. git commit –help查看帮助，还有许多参数有其他效果，一般来说了解上述三种即可满足我们工作中的日常开发了 拓展补充通常我们提交git的时候都是 123git add .git commit -m \"some str\"git push 这三大步，而实际上，你只需要两条命令就够了，除非有新的文件要被添加进去。 12git commit -am \"some str\"git push","categories":[],"tags":[]},{"title":"相对路径","slug":"相对路径","date":"2020-07-01T03:37:53.000Z","updated":"2020-10-10T01:35:50.665Z","comments":true,"path":"2020/07/01/相对路径/","link":"","permalink":"https://zhanls.github.io/2020/07/01/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/","excerpt":"","text":"相对路径使用的符号及其含义 “./“ or “”：代表目前所在的目录 “../“：代表上一层目录 “/“：代表根目录假设有如下文件系统： 一张图 文件在当前目录 2.html访问img2.png*123&lt;img src=\"./img2.png\"&gt;&lt;!-- or --&gt;&lt;img src=\"img2.png\"&gt; 文件在上一级目录 1.html访问img下的img1.png*1&lt;img src=\"../img/img1.png\"&gt; 2.html访问img下的img1.png*1&lt;img src=\"../../img/img1.png\"&gt; 文件在下一级目录 1.html访问img2.png*1&lt;img src=\"../../img/img1.png\"&gt; 根目录表示法 任何页面访问img下的img1.png*1&lt;img src=\"/img/img1.png\"&gt; last but not least - webpack devServer proxy path","categories":[],"tags":[]},{"title":"TypeScript的读书笔记（一）","slug":"TypeScript的读书笔记（一）","date":"2020-06-29T05:43:19.000Z","updated":"2020-10-10T01:35:50.651Z","comments":true,"path":"2020/06/29/TypeScript的读书笔记（一）/","link":"","permalink":"https://zhanls.github.io/2020/06/29/TypeScript%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"语言概况TypeScript的作者是安德斯·海尔斯伯格，C#的首席架构师。丹麦的天才程序员，大牛中的大牛，1960年生人 研发背景TypeScript 起源于使用JavaScript开发的大型项目 。由于JavaScript语言本身的局限性，难以胜任和维护大型项目开发。因此微软开发了TypeScript，使得其能够胜任开发大型项目。 — 因此是否可以总结出一点：没有开发过大型项目的TypeScript使用者，水平一般不会很高（思考：为什么？）。当然你对对方水平的认识是充满了主观色彩，或者说以你自己为基准的，工厂的木匠对建筑大师的设计还嗤之以鼻呢。 特性TypeScript 是一种给 JavaScript 添加特性的语言扩展。 类型批注 类 接口 模块 装饰器 枚举 TS做的事情不是新鲜事，我上学的一门课程Software Testing用到了Java语言，C++和C语言不太清楚，但我认为TS的面向对象編程的理念大概也是出自此处。","categories":[],"tags":[]},{"title":"GitLab分支管理规范","slug":"GitLab分支管理规范","date":"2020-06-29T01:18:26.000Z","updated":"2020-10-10T01:35:50.648Z","comments":true,"path":"2020/06/29/GitLab分支管理规范/","link":"","permalink":"https://zhanls.github.io/2020/06/29/GitLab%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/","excerpt":"","text":"版本号规范规范的概要如下： 版本格式：主版本号.次版本号.修订号，版本号递增规则如下： 主版本号：当你做了不兼容的功能修改，最小为0 次版本号：当你做了向下兼容的功能性新增，最小为0 修订号：当你做了向下兼容的问题修正，最小为0 版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为四位版本号（可选）。 分支命名规范通常每个应用的代码将包括 master、develop、release、hotfix、feature分支，release、hotfix 、feature分支的命名规则分别为：release/，hotfix/、feature/*。 主要分支（保护分支）master分支： master分支的所有操作都是受保护的，团队中应该指定相关负责人对master分支进行管理。 master分支上存放的应该是随时可供在生产环境中部署的代码（Production Ready state）。当开发活动告一段落，产生了一份新的可供部署的代码时，master分支上的代码会被更新。同时，每一次更新，都有对应的版本号标签（TAG）。 develop分支： develop分支也是受保护的，开发人员不具备权限直接将代码合并到deveolp，团队中应该指定相关人员进行code review，决定是否接受开发人员合并代码的请求。 主库除了master分支外，至少还要有一个活动分支，即develop分支，平时日常的开发都基于活动分支develop开发。 辅助分支feature分支： feature分支用于开发一项新的功能，feature分支从develop分支创建，feature分支最终需要合并回develop分支或者被废弃，合并回develop分支后feature分支可删除。 release分支： release分支用于开发完成后将代码进行发布。当本次迭代的所有功能完成开发，并且合并到develop分支后，从develop分支创建release分支（创建动作可由模块负责人来操作）进行后续的提测和发布工作。release分支上可以做缺陷修复工作，但当前迭代之外的需求不能混到release分支中，通过在release分支上进行缺陷修复工作，可以将develop分支空闲出来进行后续迭代的开发。 本次迭代的测试环境，预发布环境，生产环境部署都是从release分支进行产物构建的。发布到生产环境后，release分支需要合并到develop分支和master分支，并且master分支需要打上这一次迭代上线的版本号（比如1.2.0），合并完成之后release分支可删除。 hotfix分支： hotfix用于线上BUG的紧急修复（需要立即修复的BUG）。hotfix分支从master分支创建，hotfix类似于release分支，可用于测试，预发布，生产环境产物的构建。上线完成之后，hotfix分支需要合并到develop分支和master分支，合并后master分支需要打tag（比如1.2.1），合并完成之后，该分支可删除。 Gitflow示意图 Gitflow","categories":[],"tags":[]},{"title":"我见我想我为","slug":"我见我想我为","date":"2020-06-26T16:32:30.000Z","updated":"2020-10-10T01:35:50.662Z","comments":true,"path":"2020/06/27/我见我想我为/","link":"","permalink":"https://zhanls.github.io/2020/06/27/%E6%88%91%E8%A7%81%E6%88%91%E6%83%B3%E6%88%91%E4%B8%BA/","excerpt":"","text":"什么感觉都没有实在是太难受了，回想前文，我刚从家里出发，谁知道居然给一个B-，实在是难以接受啊理由很简单却，就是你这个人工作消极怠工，交代的事件却没了下文，没闪么好看的，写作的时候旁边一顶要安静，这篇文章我会发布出去，没有为什么，就当做一种发泄","categories":[],"tags":[]},{"title":"总结JavaScript闭包(Closure)","slug":"总结JavaScript闭包-Closure","date":"2020-06-24T06:21:13.000Z","updated":"2020-10-10T03:34:22.973Z","comments":true,"path":"2020/06/24/总结JavaScript闭包-Closure/","link":"","permalink":"https://zhanls.github.io/2020/06/24/%E6%80%BB%E7%BB%93JavaScript%E9%97%AD%E5%8C%85-Closure/","excerpt":"","text":"闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。 根据MDN对闭包的讲解，什么是闭包： 函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。 第一次看到这里的时候，我还挺惊讶的，没想到每个函数的创建，实际上都有一个闭包也在生成，这也决定了，如果我被问到这方面的问题，绝对说不点子上、 然后把，我又想了一下，已经2020年了，针对这个问题网上资源众多，还是放弃了自己再重新写一篇博客，组织文章结构，组织语言，实在太麻烦了，放出几个我学习闭包的链接吧： 什么是闭包？ - 知乎 阮一峰老师教学 廖雪峰老师教学 补充:在全栈工程师修炼指南中，四火老师在JavaScript面向对象一文中也提到了闭包（Closure）的概念。他指出： 闭包简单说，就是引用了自由变量的函数。这里的关键是“自由变量”，其实这个自由变量，扮演的作用是为这个函数调用提供了一个“上下文”，而上下文的不同，将对入参相同的函数调用造成不同的影响，它包括： 函数的行为不同，即函数调用改变其上下文中的其它变量，如例子中的 setName() 函数的返回值不同，如例子中的 getName() 再补充：闭包翻译自英文单词closure，这是个有些不好理解的词. 根据wiki百科： 在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是在支持头等函数的编程语言中实现词法绑定的一种技术。闭包并不只是JavaScript独有的一个概念，实际上，这个概念最早应该是由Peter Landin提出，他将其定义为一种包含环境成分和控制成分的实体，用于在他的SECD机器上对表达式求值。在编程语言Scheme上，就有对闭包最早的实现 概念误区： 有些人会把JavaScript执行上下文，或者作用域(Scope, ES3规定的执行上下文的一部分)这个概念当作闭包。 实际上JavaScript中跟闭包对应的概念就是“函数”，可能是这个概念太过于普通，跟闭包看起来又没什么联系，所以大家才不自觉地把这个概念对应到了看起来更特别的“作用域”吧。 执行上下文： 相比普通函数，JavaScript函数的主要复杂性来自于它携带的“环境部分”。当然，发展到今天的JavaScript，它所定义的环境部分，已经比当初经典的定义复杂了很多。 闭包与JavaScript函数： 闭包与JavaScript函数","categories":[],"tags":[]},{"title":"取消请求：Axios cancelToken原理及应用","slug":"取消请求：Axios-cancelToken原理及应用","date":"2020-06-24T06:18:44.000Z","updated":"2020-10-10T01:35:50.654Z","comments":true,"path":"2020/06/24/取消请求：Axios-cancelToken原理及应用/","link":"","permalink":"https://zhanls.github.io/2020/06/24/%E5%8F%96%E6%B6%88%E8%AF%B7%E6%B1%82%EF%BC%9AAxios-cancelToken%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/","excerpt":"","text":"&emsp;前一段时间在做后台管理系统上传图片时遇到这么一个问题：上传图片相关操作都在一个element-ui的dialog对话框内完成，若在图片上传完成之前，用户点击”取消”按钮关闭了对话框，此时处于pending状态的上传图片请求需要取消。 &emsp;为了解决这个问题，后来就跑去查了一下Axios API文档，发现里面有一段对cancelToken取消请求的介绍，挺有意思的，记录如下。 基本使用我们先来看看CancelToken的基本用法： 第一种方式12345678910111213141516171819202122const CancelToken = axios.CancelToken;const source = CancelToken.source();axios.get('/user/12345', &#123; cancelToken: source.token&#125;).catch(function (thrown) &#123; if (axios.isCancel(thrown)) &#123; // 请求主动被取消 console.log('请求已被取消', thrown.message); &#125; else &#123; // 处理其他错误 &#125;&#125;);axios.post('/user/12345', &#123; name: 'new name'&#125;, &#123; cancelToken: source.token&#125;)// 取消请求 (消息参数是可选的)source.cancel('不想请求了'); 注意，虽然例子里没有列出来，但是含有cancelToken键的对象参数在: 发送delete，head和options请求时，是放在第二个参数里 发送post, put, patch请求时，是放在第三个参数里 第二种方式直接调用执行器里里的cancel方法 12345678910const CancelToken = axios.CancelToken;let cancel;axios.get('/user/12345', &#123; cancelToken: new CancelToken(function executor(c) &#123; cancel = c &#125;)&#125;)cancel() Ok, 那么好奇(作死)的小伙伴看到就会问了啊 为什么它这么写就可以取消请求啊？ 它内部到底是如何实现的？ PS：也是以防面试时被问到了答不上来~(●’◡’●) 源码分析以下摘自axios v0.19.0: node_modules/axios/lib/adapters/xhr.js 159行至171行 12345678910111213if (config.cancelToken) &#123; // Handle cancellation config.cancelToken.promise.then(function onCanceled(cancel) &#123; if (!request) &#123; return; &#125; request.abort(); reject(cancel); // Clean up request request = null; &#125;);&#125; 分析：从上述源码可以看到，发送请求过程中，如果config对象参数里有cancelToken键，执行axios.CancelToken.source().token原型的promise方法 以下摘自axios v0.19.0: node_modules/axios/lib/cancel/CancelToken.js 1234567891011121314/** * Returns an object that contains a new `CancelToken` and a function that, when called, * cancels the `CancelToken`. */CancelToken.source = function source() &#123; var cancel; var token = new CancelToken(function executor(c) &#123; cancel = c; &#125;); return &#123; token: token, cancel: cancel &#125;;&#125;; 分析：可以看到，当用户调用source.cancel()方法的时候，实际上调用了传入executor函数的第一个参数函数cancel，上面第二种用法就是这样使用的 下面我们来分析一下CancelToken类 1234567891011121314151617181920212223242526272829303132'use strict';var Cancel = require('./Cancel');/** * A `CancelToken` is an object that can be used to request cancellation of an operation. * * @class * @param &#123;Function&#125; executor The executor function. */function CancelToken(executor) &#123; if (typeof executor !== 'function') &#123; throw new TypeError('executor must be a function.'); &#125; var resolvePromise; this.promise = new Promise(function promiseExecutor(resolve) &#123; resolvePromise = resolve; &#125;); var token = this; // 执行了里面的cancel方法 executor(function cancel(message) &#123; if (token.reason) &#123; // Cancellation has already been requested return; &#125; token.reason = new Cancel(message); resolvePromise(token.reason); &#125;);&#125; 分析：记得xhr.js里的config.cancelToken.promise.then()函数吗？这个promise的resolve方法会在cancel方法被调用之后触发，最后调用到request.abort()中止请求~","categories":[],"tags":[]}],"categories":[],"tags":[]}